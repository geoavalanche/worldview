#!/usr/bin/env python
#
# NASA Worldview
#
# This code was originally developed at NASA/Goddard Space Flight Center for
# the Earth Science Data and Information System (ESDIS) project.
#
# Copyright (C) 2013 - 2014 United States Government as represented by the
# Administrator of the National Aeronautics and Space Administration.
# All Rights Reserved.
#

from datetime import datetime, date, timedelta
import json
from optparse import OptionParser
import os
import sys
import xmltodict

SKIP_LAYERS = [
    "Sea_Surface_Temp_Microwave",
    "Sea_Surface_Temp_Blended",
    "arctic_graticule_3413_reverb",
    "blue_marble_arctic",
]

prog = os.path.basename(__file__)
base_dir = os.path.join(os.path.dirname(__file__), "..")
version = "1.0.0"
help_description = """\
Extracts configuration information from a GetCapabilities file.
"""

parser = OptionParser(usage="Usage: %s [options] file [file...]" % prog,
                      version="%s version %s" % (prog, version),
                      epilog=help_description)
(options, args) = parser.parse_args()

wv = {
    "layers": {}
}

for filename in args:
    with open(filename) as fp:
        xml = fp.read()
    gc = xmltodict.parse(xml)

    gc_contents = gc["Capabilities"]["Contents"]
    wv_layers = wv["layers"]
    for gc_layer in gc_contents["Layer"]:

        id = gc_layer["ows:Identifier"]
        if id in SKIP_LAYERS:
            sys.stderr.write("Skipping layer: {0}\n".format(id))
            continue
        if id not in wv_layers:
            wv_layers[id] = {}
        wv_layer = wv_layers[id]

        wv_layer["id"] = id
        wv_layer["type"] = "wmts"
        wv_layer["tileSize"] = [512, 512]
        wv_layer["format"] = gc_layer["Format"]

        # Extract start and end dates
        if "Dimension" in gc_layer:
            dimension = gc_layer["Dimension"]
            if dimension["ows:Identifier"] == "time":
                try:
                    wv_layer["period"] = "daily"
                    values = dimension["Value"].split("/")

                    # Layer is still actively being produced if the end date
                    # greater than yesterday
                    end_date = datetime.strptime(values[1], "%Y-%m-%d")
                    yesterday = datetime.now() - timedelta(days=1)
                    wv_layer["startDate"] = values[0]
                    if end_date < yesterday:
                        wv_layer["endDate"] = values[1]
                except ValueError:
                    raise Exception("Invalid time: {0}".format(values))

        # Extract matrix set
        matrixSet = gc_layer["TileMatrixSetLink"]["TileMatrixSet"]
        if not "projections" in wv_layer:
            wv_layer["projections"] = {}
        if matrixSet.startswith("EPSG4326"):
            wv_layer["projections"]["geographic"] = {
                 "source": "GIBS:geographic",
                 "matrixSet": "GIBS:" + matrixSet
            }
        if matrixSet.startswith("EPSG3413"):
            wv_layer["projections"]["arctic"] = {
                 "source": "GIBS:arctic",
                 "matrixSet": "GIBS:" + matrixSet
            }
        if matrixSet.startswith("EPSG3031"):
            wv_layer["projections"]["antarctic"] = {
                 "source": "GIBS:antarctic",
                 "matrixSet": "GIBS:" + matrixSet
            }

json_options = {}
json_options["indent"] = 4
json_options["separators"] = (',', ': ')

print json.dumps(wv, **json_options)

